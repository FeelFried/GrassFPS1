using GrassFPS.Settings;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Fallout4;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.Synthesis;

namespace GrassFPS
{
    public class Program
    {
        private static Lazy<TopLevelSettings> _settings = null!;
        private static TopLevelSettings Settings => _settings.Value;

        public static async Task<int> Main(string[] args) => await SynthesisPipeline.Instance
                .AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
                .SetAutogeneratedSettings("Settings", "settings.json", out _settings)
                .SetTypicalOpen(GameRelease.SkyrimSE, "GrassFPS.esp")
                .Run(args);

        public static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            foreach (Mutagen.Bethesda.Skyrim.IGrassGetter? grassGetter in state.LoadOrder.PriorityOrder.Grass().WinningOverrides())
            {
                if (grassGetter is null || !Settings.GlobalFilters.FilterAllows(grassGetter.FormKey))
                    continue;

                foreach (GrassSettings? settingsGroup in Settings.Grass)
                {
                    if (!settingsGroup.HasAnyEnabledValues() || settingsGroup.FilterDisallows(grassGetter))
                        continue;

                    Mutagen.Bethesda.Skyrim.Grass? copy = settingsGroup.ApplySettingTo(grassGetter, out bool valueChanged);

                    if (valueChanged)
                    {
                        state.PatchMod.Grasses.Set(copy);
                        Console.WriteLine($"Modified \"{copy.EditorID}\" using values from \"{settingsGroup.Identifier}\"");
                    }
                }
            }
        }
    }
}
